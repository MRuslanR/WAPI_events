import asyncio
from datetime import time, timezone

from telegram import Update, constants
from telegram.ext import (
    ApplicationBuilder,
    MessageHandler,
    filters,
    ContextTypes,
    CallbackQueryHandler, # –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é, –Ω–æ JobQueue –µ–≥–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–æ–¥ –∫–∞–ø–æ—Ç–æ–º
)

import config
from main import main_cycle

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
config.setup_logging()
logger = config.get_logger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ü–∏–∫–ª–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏
processing_lock = asyncio.Lock()


async def run_processing_job(context: ContextTypes.DEFAULT_TYPE, chat_id: int, trigger_type: str):
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –æ–¥–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π.
    –û–Ω–∞ —É–ø—Ä–∞–≤–ª—è–µ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—É—Å–∫–æ–≤.

    :param context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞.
    :param chat_id: ID —á–∞—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π.
    :param trigger_type: –¢–∏–ø –∑–∞–ø—É—Å–∫–∞ ('manual' –∏–ª–∏ 'scheduled') –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è.
    """
    if processing_lock.locked():
        logger.warning(
            "–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ (%s), –∫–æ–≥–¥–∞ –æ–Ω–∞ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞. –ó–∞–ø—É—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω.",
            trigger_type
        )
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∑–∞–ø—É—Å–∫–∞
        if trigger_type == 'manual':
            message_text = "‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞. –í–∞—à —Ä—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω. –î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è."
        else: # 'scheduled'
            message_text = f"‚ö†Ô∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–∂–µ –±—ã–ª–∞ –∞–∫—Ç–∏–≤–Ω–∞, –∫–æ–≥–¥–∞ –ø–æ–¥–æ—à–ª–æ –≤—Ä–µ–º—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é ({context.job.name}). –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ –ø—Ä–æ–ø—É—â–µ–Ω."

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
        await context.bot.send_message(
            chat_id=chat_id,
            text=message_text
        )
        return

    async with processing_lock:
        logger.info("–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –¢—Ä–∏–≥–≥–µ—Ä: %s.", trigger_type)
        proc_msg = None
        try:
            proc_msg = await context.bot.send_message(
                chat_id=chat_id,
                text=f"üöÄ –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –Ω–æ–≤–æ—Å—Ç–µ–π... (–ó–∞–ø—É—Å–∫: {trigger_type})"
            )
            logger.info("–ó–∞–ø—É—Å–∫ main_cycle –¥–ª—è —á–∞—Ç–∞ %d", chat_id)

            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç—è–∂–µ–ª—É—é, —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            final_digest_status = await asyncio.to_thread(main_cycle)

            if final_digest_status == "Digest sent":
                logger.info("–î–∞–π–¥–∂–µ—Å—Ç –∏–ª–∏ —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç %d.", chat_id)
            elif final_digest_status == 'No news':
                await context.bot.send_message(
                    chat_id=chat_id,
                    text=f"No news for the past period"
                )
                logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –Ω–æ–≤—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç %d.", chat_id)
            else:
                await context.bot.send_message(
                    chat_id=chat_id,
                    text=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–π–¥–∂–µ—Å—Ç–∞, {final_digest_status}"
                )
                logger.info("–ù–æ–≤—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, —Ü–∏–∫–ª –∑–∞–≤–µ—Ä—à–µ–Ω.")

        except Exception as e:
            logger.critical("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ run_processing_job", exc_info=True)
            try:
                await context.bot.send_message(
                    chat_id=chat_id,
                    text=f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏: `{e}`",
                    parse_mode=constants.ParseMode.MARKDOWN_V2
                )
            except Exception as send_e:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –¥–∞–∂–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: %s", send_e)

        finally:
            if proc_msg:
                try:
                    await context.bot.delete_message(chat_id=chat_id, message_id=proc_msg.message_id)
                    logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ä—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–¥–∞–ª–µ–Ω–æ.")
                except Exception:
                    logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ä—Ç–µ.")
            logger.info("–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Å–Ω—è—Ç–∞.")


async def start_command_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start, –∑–∞–ø—É—â–µ–Ω–Ω—É—é –≤—Ä—É—á–Ω—É—é –≤ —Ü–µ–ª–µ–≤–æ–º –∫–∞–Ω–∞–ª–µ.
    """
    chat = update.effective_chat
    if chat.id != config.TELEGRAM_CHAT_ID:
        logger.warning("–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –≤ –Ω–µ–ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω–Ω–æ–º —á–∞—Ç–µ ID: %d", chat.id)
        return

    logger.info("–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –≤ —á–∞—Ç–µ %d", chat.id)
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –≤ —Ñ–æ–Ω–µ, —á—Ç–æ–±—ã –±–æ—Ç –º–æ–≥ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –¥—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã
    asyncio.create_task(run_processing_job(context, chat.id, trigger_type='manual'))


async def scheduled_run(context: ContextTypes.DEFAULT_TYPE):
    """
    –§—É–Ω–∫—Ü–∏—è-–æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é —á–µ—Ä–µ–∑ JobQueue.
    """
    job = context.job
    chat_id = job.chat_id
    logger.info("–°—Ä–∞–±–æ—Ç–∞–ª –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ (job: %s)", job.name)
    await run_processing_job(context, chat_id, trigger_type='scheduled')


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è."""
    logger.info("--- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---")

    # –í–∞–ª–∏–¥–∞—Ü–∏—è –±–∞–∑–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
    try:
        config.load_feed_sources()
    except config.ConfigError as e:
        logger.critical("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏, –±–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω: %s", e)
        return

    if not config.TELEGRAM_BOT_TOKEN:
        logger.critical("–ù–µ —É–∫–∞–∑–∞–Ω TELEGRAM_BOT_TOKEN. –ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω.")
        return
    if not config.TELEGRAM_CHAT_ID:
        logger.critical("–ù–µ —É–∫–∞–∑–∞–Ω TELEGRAM_CHAT_ID. –ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω.")
        return


    app = ApplicationBuilder().token(config.TELEGRAM_BOT_TOKEN).build()

    # 1. –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä—É—á–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
    app.add_handler(
        MessageHandler(
            filters=filters.ChatType.CHANNEL & filters.Command("start"),
            callback=start_command_handler
        )
    )

    # 2. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á–∏ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
    schedule_times = config.load_schedule()
    if schedule_times:
        job_queue = app.job_queue
        for t_str in schedule_times:
            hour, minute = map(int, t_str.split(':'))
            run_time = time(hour, minute, tzinfo=timezone.utc)
            job_queue.run_daily(
                callback=scheduled_run,
                time=run_time,
                chat_id=config.TELEGRAM_CHAT_ID,
                name=f"Daily digest at {t_str} UTC"
            )
        logger.info("–í—Å–µ–≥–æ –∑–∞–¥–∞—á –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é –¥–æ–±–∞–≤–ª–µ–Ω–æ: %d", len(schedule_times))
    else:
        logger.info("–ó–∞–¥–∞—á–∏ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã.")


    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
    app.run_polling()


if __name__ == "__main__":
    main()